name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: weather_forecast_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.1
        bundler-cache: true
    
    - name: Set up test database
      run: |
        cp .env.example .env
        bundle exec rails db:create
        bundle exec rails db:migrate
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/weather_forecast_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
    
    - name: Run RuboCop
      run: bundle exec rubocop
    
    - name: Run RSpec tests
      run: bundle exec rspec
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/weather_forecast_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
        OPENWEATHER_API_KEY: test_key
    
    - name: Run security audit
      run: bundle exec bundle audit --update
    
    - name: Generate coverage report
      run: |
        bundle exec rspec --format RspecJunitFormatter --out rspec.xml
        bundle exec rspec --format progress --format RspecJunitFormatter --out rspec.xml
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/weather_forecast_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
        OPENWEATHER_API_KEY: test_key

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t weather-forecast:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name weather-test -p 3000:3000 weather-forecast:latest
        sleep 30
        curl -f http://localhost:3000/api/v1/health || exit 1
        docker stop weather-test

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'